apiVersion: apps/v1
kind: Deployment
metadata:
  name:  worker
  namespace: default
  labels:
    app:  worker
spec:
  selector:
    matchLabels:
      app: worker
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app:  worker
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      containers:
      - name:  worker
        image:  worker
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        livenessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /_status/healthz
            port: 80
          initialDelaySeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        env:
        - name: MINIO_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: minio-config
              key: MINIO_ENDPOINT
        - name: MINIO_ID
          valueFrom:
            configMapKeyRef:
              name: minio-config
              key: MINIO_ID
        - name: MINIO_KEY
          valueFrom:
            configMapKeyRef:
              name: minio-config
              key: MINIO_KEY
        - name: MINIO_REGION
          valueFrom:
            configMapKeyRef:
              name: minio-config
              key: MINIO_REGION
        - name: MINIO_PORT
          valueFrom:
            configMapKeyRef:
              name: minio-config
              key: MINIO_PORT
        - name: WORKER_PROVIDER
          valueFrom:
            configMapKeyRef:
              name: worker-config
              key: WORKER_PROVIDER
        - name: WORKER_INFILE
          valueFrom:
            configMapKeyRef:
              name: worker-config
              key: WORKER_INFILE
        - name: WORKER_OUTFILE
          valueFrom:
            configMapKeyRef:
              name: worker-config
              key: WORKER_OUTFILE
        - name: WORKER_INFLILE_NAME
          valueFrom:
            configMapKeyRef:
              name: worker-config
              key: WORKER_INFLILE_NAME
        - name: WORKER_OUTFILE_NAME
          valueFrom:
            configMapKeyRef:
              name: worker-config
              key: WORKER_OUTFILE_NAME
        - name: WORKER_CONTENT_TYPE
          valueFrom:
            configMapKeyRef:
              name: worker-config
              key: WORKER_CONTENT_TYPE
        - name: RABBIT_USER
          valueFrom:
            configMapKeyRef:
              name: rabbit-config
              key: RABBIT_USER
        - name: RABBIT_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: rabbit-config
              key: RABBIT_PASSWORD
        - name: RABBIT_HOST
          valueFrom:
            configMapKeyRef:
              name: rabbit-config
              key: RABBIT_HOST
        - name: RABBIT_PORT
          valueFrom:
            configMapKeyRef:
              name: rabbit-config
              key: RABBIT_PORT   
        - name: RABBIT_QUEUE
          valueFrom:
            configMapKeyRef:
              name: rabbit-config
              key: RABBIT_QUEUE   
        ports:
        - containerPort:  80
          name:  worker
      restartPolicy: Always